package practice;
//기사의 여행에서는 백트래킹과 경계 조건이 가장 중요함!!!!!!!!

//큐를 사용해서 체스판 더 작게 만들어서 풀기

/*
* Knight's Tour 문제는 체스판에서 나이트(Knight) 말이 모든 체스판의 칸을 한 번씩만 방문하면서
* 체스판의 모든 방을 방문하면 종료. 
* 나이트는 체스에서 "L" 모양으로 움직이는데, 두 칸 직진하고 한 칸 옆으로 이동하는 방식입니다.
* 임의 위치에서 시작

문제 설명
체스판은 보통 8x8 크기이지만, 이 문제는 임의의 N x N 체스판에서 해결할 수 있습니다.
목표는 나이트가 시작점에서 출발하여 모든 칸을 한 번씩만 방문하면서 끝나는 경로를 찾는 것입니다.
종료조건: 모든 칸이 방문하였을 때 종료 > 방문한 순서를 출력

구현조건:
(x,y)를 저장하는 point 객체를 사용하여 스택으로 non-recursive backtracking 알고리즘으로 구현
*/

//다음 이동할 위치
//위치 정보를 저장하기 위한 객체

public class KnightTour {
	// 위치 정보 저장하는 객체 생성
	
	// 체스판 크기 지정
	
	// 체스판 배열 생성
	
	// Point 객체로 나이트의 현재 좌표를 저장
	
	// 체스판을 초기화 (-1로 설정)
    // 한 번도 안 간 곳을 -1로 설정하는 것임
	
	// 체스판의 범위 내에서 유효한 움직임인지 확인
	
	// 나이트 투어 알고리즘 (비재귀적으로 하기 위해 스택 사용)
	{
		//배열에 Offsets4 객체를 치환해야 한다.
		
		// 나이트가 이동할 수 있는 8가지 방향
		
		// 현재 좌표를 저장할 스택 생성
		
		// 시작 위치를 스택에 푸시
		
		// 체스판에 knight 채워졌다는 걸 0으로 표시
		
		// 하나 채워졌기 때문에 이동한 횟수를 1로 설정
		
		//스택이 비어 있지 않은 동안 반복문
		{
			//현재 knight의 위치 확인
			
			// 기저 조건
        	// 1. 전부 다 돌면 값 반환(true)
			
			// 2. 8가지 방향으로 knight 이동 시도했는데 이동하지 못하면 값 반환(false)
			// flag 값 생성

			// 8가지 방향으로 knight 이동 시도(반복문)
			{	
				// 다음 이동할 곳 설정
				
				// 체스판 범위 내에서 유효한 움직임인지 확인한 후 knight 이동
			}
			
			// 더 이상 이동할 곳이 없을 경우 백트래킹
        	// safe하지 않다는 뜻
			
		}
		//해결하지 못한 경우 값 반환
	}
	
	//결과 출력 메서드
	
	public static void main(String[] args) {
		// 초기화 메서드
        initializeBoard();
        
        // 나이트가 (0, 0)에서 시작
        if (solveKnightTracking(0, 0)) {
        	//결과 출력 메서드
            showTracking();
        } else {
            System.out.println("해결할 수 없습니다.");
        }
    }
}
